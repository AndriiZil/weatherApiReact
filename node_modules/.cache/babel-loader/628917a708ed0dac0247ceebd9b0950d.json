{"ast":null,"code":"import _regeneratorRuntime from \"/home/andrii/REACT/weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/andrii/REACT/weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/andrii/REACT/weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/andrii/REACT/weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/andrii/REACT/weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/andrii/REACT/weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/andrii/REACT/weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/andrii/REACT/weather/src/App.js\";\nimport React, { Component } from 'react';\nimport Info from './components/Info';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nvar API_KEY = '0b3909c83e4e4fc28d7898444ae7eb59';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      pressure: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    _this.gettingWeather =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var city, api_url, data, sunset, date, sunset_date;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                city = event.target.elements.city.value;\n\n                if (!city) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 5;\n                return fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n\n              case 5:\n                api_url = _context.sent;\n                _context.next = 8;\n                return api_url.json();\n\n              case 8:\n                data = _context.sent;\n                sunset = data.sys.sunset;\n                date = new Date();\n                date.setTime(sunset);\n                sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n                _this.setState({\n                  temp: data.main.temp,\n                  city: data.name,\n                  country: data.sys.country,\n                  pressure: data.main.pressure,\n                  sunset: sunset_date,\n                  error: \"\"\n                });\n\n                _context.next = 17;\n                break;\n\n              case 16:\n                alert(\"Вы должны ввести город!\");\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Form, {\n        weatherMethod: this.gettingWeather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(Weather, {\n        temp: this.state.temp,\n        city: this.state.city,\n        country: this.state.country,\n        sunrise: this.state.sunrise,\n        sunset: this.state.sunset,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/andrii/REACT/weather/src/App.js"],"names":["React","Component","Info","Form","Weather","API_KEY","App","state","temp","undefined","city","country","pressure","sunset","error","gettingWeather","event","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","name","alert","sunrise"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,IAAMC,OAAO,GAAG,kCAAhB;;IAEMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAEC,SADA;AAENC,MAAAA,IAAI,EAAED,SAFA;AAGNE,MAAAA,OAAO,EAAEF,SAHH;AAING,MAAAA,QAAQ,EAAEH,SAJJ;AAKNI,MAAAA,MAAM,EAAEJ,SALF;AAMNK,MAAAA,KAAK,EAAEL;AAND,K;;UASRM,c;;;;;+BAAiB,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfA,gBAAAA,KAAK,CAACC,cAAN;AACMP,gBAAAA,IAFS,GAEFM,KAAK,CAACE,MAAN,CAAaC,QAAb,CAAsBT,IAAtB,CAA2BU,KAFzB;;AAAA,qBAIXV,IAJW;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAMXW,KAAK,6DAAsDX,IAAtD,oBAAoEL,OAApE,mBANM;;AAAA;AAKPiB,gBAAAA,OALO;AAAA;AAAA,uBAOMA,OAAO,CAACC,IAAR,EAPN;;AAAA;AAOPC,gBAAAA,IAPO;AASTX,gBAAAA,MATS,GASAW,IAAI,CAACC,GAAL,CAASZ,MATT;AAUTa,gBAAAA,IAVS,GAUF,IAAIC,IAAJ,EAVE;AAWbD,gBAAAA,IAAI,CAACE,OAAL,CAAaf,MAAb;AACIgB,gBAAAA,WAZS,GAYKH,IAAI,CAACI,QAAL,KAAkB,GAAlB,GAAwBJ,IAAI,CAACK,UAAL,EAAxB,GAA4C,GAA5C,GAAkDL,IAAI,CAACM,UAAL,EAZvD;;AAcb,sBAAKC,QAAL,CAAc;AACZzB,kBAAAA,IAAI,EAAEgB,IAAI,CAACU,IAAL,CAAU1B,IADJ;AAEZE,kBAAAA,IAAI,EAAEc,IAAI,CAACW,IAFC;AAGZxB,kBAAAA,OAAO,EAAEa,IAAI,CAACC,GAAL,CAASd,OAHN;AAIZC,kBAAAA,QAAQ,EAAEY,IAAI,CAACU,IAAL,CAAUtB,QAJR;AAKZC,kBAAAA,MAAM,EAAEgB,WALI;AAMZf,kBAAAA,KAAK,EAAE;AANK,iBAAd;;AAda;AAAA;;AAAA;AAuBbsB,gBAAAA,KAAK,CAAC,yBAAD,CAAL;;AAvBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;6BA2BR;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAE,KAAKrB,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,OAAD;AACE,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,IADnB;AAEE,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWG,IAFnB;AAGE,QAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,OAHtB;AAIE,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAW8B,OAJtB;AAKE,QAAA,MAAM,EAAE,KAAK9B,KAAL,CAAWM,MALrB;AAME,QAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,KANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAcD;;;;EArDeb,S;;AAwDlB,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport Info from './components/Info';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = '0b3909c83e4e4fc28d7898444ae7eb59';\n\nclass App extends Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  };\n\n  gettingWeather = async (event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n\n    if (city) {\n      const api_url = await\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n\n      var sunset = data.sys.sunset;\n      var date = new Date();\n      date.setTime(sunset);\n      var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunset: sunset_date,\n        error: \"\"\n      })\n    } else {\n      alert(\"Вы должны ввести город!\")\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Info />\n        <Form weatherMethod={this.gettingWeather} />\n        <Weather\n          temp={this.state.temp}\n          city={this.state.city}\n          country={this.state.country}\n          sunrise={this.state.sunrise}\n          sunset={this.state.sunset}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}